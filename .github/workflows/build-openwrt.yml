name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_kernel:
        description: "Select Kernel Version"
        required: false
        default: "5.15.1_6.1.1"
        type: choice
        options:
          - 5.4.1
          - 5.10.1
          - 5.15.1
          - 6.1.1
          - 5.4.1_5.10.1
          - 5.15.1_6.1.1

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  TAGS_NAME: lede
  STORAGE: save
  BOARD: s90d
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization Environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

          sudo timedatectl set-timezone "${TZ}"
          sudo mkdir -p /workdir
          sudo chown ${USER}:${GROUPS} /workdir

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone Source Code
        id: codes
        working-directory: /workdir
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          git clone ${REPO_URL} -b ${REPO_BRANCH} openwrt
          ln -sf /workdir/openwrt ${GITHUB_WORKSPACE}/openwrt

          df -hT ${PWD}
          echo "build_tag=OpenWrt_${TAGS_NAME}_${STORAGE}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Load Custom Feeds
        run: |
          [[ -f ${FEEDS_CONF} ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: Update Feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: Install Feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [[ -d files ]] && mv files openwrt/files
          [[ -f ${CONFIG_FILE} ]] && cp -f ${CONFIG_FILE} openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd openwrt/
          ${GITHUB_WORKSPACE}/{$DIY_P2_SH}

      - name: Download Package
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the OpenWrt
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clean Server Space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd openwrt/
          mkdir output
          cp -f bin/targets/*/*/*rootfs.tar.gz output/
          cp -f .config output/config
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null

          cd openwrt/output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" > "${file}.sha"; down

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload OpenWrt to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}

      - name: Package OpenWrt
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: openwrt/output/*rootfs.tar.gz
          KERNEL_VERSION_NAME: ${{ inputs.openwrt_kernel }}
          PACKAGE_SOC: ${{ env.BOARD }}
          WHOAMI: lsilencej

      - name: Upload the Packaged OpenWrt
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### OpenWrt Image information
            - Default IP: 192.168.1.1
            - Default username: root
            - Default password: password
            ### OpenWrt Image Verification
            - sha256sum
